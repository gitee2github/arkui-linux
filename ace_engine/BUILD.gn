# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

# Common config for Ability Cross-platform Environment(ACE) source
config("ace_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "$ace_root",
    "$ace_root/frameworks",
    "$root_out_dir/arkui/framework",
    "//third_party/zlib",
  ]

  if (is_standard_system && !use_mingw_win && !use_mac && !use_linux) {
    include_dirs += [
      "//base/global/resource_management/frameworks/resmgr/include",
      "//base/global/resource_management/interfaces/inner_api/include",
      "$ace_root/adapter/ohos/services/uiservice/include",
    ]
  }
  defines = ace_common_defines

  if (is_wearable_product) {
    defines += ace_wearable_defines
  }

  if (is_ivi_product) {
    defines += ace_ivi_defines
  }

  cflags = [
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
    "-Wno-non-c-typedef-for-linkage",
    "-Os",
  ]

  cflags_cc = [
    "-fvisibility-inlines-hidden",
    "-Wno-non-c-typedef-for-linkage",
    "-Os",
  ]

  if (use_mingw_win) {
    cflags_cc += [ "-std=c++17" ]
    defines += [ "_USE_MATH_DEFINES" ]
  }

  if (use_linux) {
    cflags_cc += [ "-std=c++17" ]
    defines += [ "_USE_MATH_DEFINES" ]
  }
}

config("ace_test_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "$ace_root",
    "$ace_root/frameworks",
    "$root_out_dir/arkui/framework",
  ]
  cflags_cc = []
  defines = ace_common_defines

  if (is_standard_system && !use_mingw_win && !use_mac && !use_linux) {
    include_dirs += [
      "//base/global/resource_management/frameworks/resmgr/include",
      "//base/global/resource_management/interfaces/inner_api/include",
    ]

    cflags_cc += [
      "-Wno-thread-safety-attributes",
      "-Wno-thread-safety-analysis",
      "-Wno-non-c-typedef-for-linkage",
    ]
    defines += [ "OHOS_STANDARD_SYSTEM" ]
  }

  if (!is_standard_system) {
    defines += [ "ENABLE_NATIVE_VIEW" ]
  }

  defines += [ "OHOS_PLATFORM" ]

  if (is_wearable_product) {
    defines += ace_wearable_defines
  }

  cflags = [
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
  ]

  cflags_cc += [ "-fvisibility-inlines-hidden" ]
  ldflags = [ "-Wl,-gc-sections" ]
}

config("ace_unittest_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "$ace_root",
    "$ace_root/frameworks",
    "$root_out_dir/arkui/framework",
  ]
  cflags_cc = []
  defines = []

  if (is_standard_system && !use_mingw_win && !use_mac && !use_linux) {
    include_dirs += [
      "//base/global/resource_management/frameworks/resmgr/include",
      "//base/global/resource_management/interfaces/inner_api/include",
    ]

    cflags_cc += [
      "-Wno-thread-safety-attributes",
      "-Wno-thread-safety-analysis",
      "-Wno-non-c-typedef-for-linkage",
    ]
    defines += [ "OHOS_STANDARD_SYSTEM" ]
  }

  cflags = [
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
  ]

  cflags_cc += [ "-fvisibility-inlines-hidden" ]
  ldflags = [ "-Wl,-gc-sections" ]

  defines += [ "ACE_UNITTEST" ]
}

ohos_source_set("ace_test_log") {
  sources = [
    "$ace_root/adapter/ohos/osal/ace_trace.cpp",
    "$ace_root/adapter/ohos/osal/log_wrapper.cpp",
    "$ace_root/frameworks/base/log/ace_trace.cpp",
  ]

  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]

  external_deps = [
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
  ]

  configs = [ ":ace_unittest_config" ]
}

config("ace_test_coverage_config") {
  if (ace_engine_feature_enable_coverage) {
    cflags = [ "--coverage" ]
    ldflags = [ "--coverage" ]
  }
}
