# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/adapter/preview/sdk/sharedlib_config.gni")
import("//foundation/arkui/ace_engine/interfaces/napi/kits/napi_lib.gni")

ace_devices = [
  "phone",
  "tv",
  "wearable",
  "tablet",
  "card",
  "car",
]
foreach(device, ace_devices) {
  ohos_executable("ace_${device}_test") {
    ohos_test = true
    test_output_dir = "$root_out_dir/common/samples"
    defines = [ "USE_GLFW_WINDOW" ]
    cflags_cc = []
    include_dirs = [
      "$ace_root",
      "$ace_root/frameworks",
      "$flutter_root/engine",
      "$flutter_root/engine/flutter/shell/platform/common/cpp/public",
      "$flutter_root/engine/ace_adapter/flutter/shell/platform/glfw/public",
      "$flutter_root/skia",
      "$flutter_root/glfw/include",
    ]
    deps = [ ":copy_preview_shared_library" ]
    sources = [
      "ace_${device}_test.cpp",
      "key_input_handler.cpp",
      "touch_event_handler_flutter.cpp",
    ]
    config = {
    }
    if (defined(current_platform.config)) {
      config = current_platform.config
    }
    if (defined(config.defines)) {
      defines += config.defines
    }
    if (defined(config.cflags_cc)) {
      cflags_cc += config.cflags_cc
    }
    if (defined(config.libace_target)) {
      deps += [ config.libace_target ]
    }

    if (defined(config.enable_rosen_backend) && config.enable_rosen_backend) {
      sources -= [ "touch_event_handler_flutter.cpp" ]
      sources += [ "touch_event_handler_rs.cpp" ]
      deps += [ "//foundation/graphic/graphic_2d/rosen/modules/glfw_render_context:libglfw_render_context" ]
    }
    if (use_mingw_win) {
      libs = [ "pthread" ]
    }
  }
}

if (is_standard_system) {
  # All dynamic libraries to be copied to the path "/previewer/common/bin/module/",
  # which are called by the napi framework, can be added to this script.
  foreach(module, napi_modules) {
    ohos_copy("copy_napi_${module.prefix}libs") {
      deps = []
      sources = []
      foreach(shard_lib, module.shard_libs) {
        subsystem_name = shard_lib.subsystem_name
        part_name = shard_lib.part_name
        deps += [ shard_lib.label ]
        out_path = get_label_info(shard_lib.label, "root_out_dir")
        lib_names = []
        if (defined(shard_lib.lib_names)) {
          lib_names += shard_lib.lib_names
        } else {
          cur_lib = get_label_info(shard_lib.label, "name")
          lib_names += [ string_replace(cur_lib, "lib", "", 1) ]
        }
        foreach(lib_name, lib_names) {
          sources += [ "${out_path}/${subsystem_name}/${part_name}/lib${lib_name}${dylib_suffix}" ]
        }
      }

      # Set the output directory for all dynamic libraries.
      if (module.prefix == "") {
        outputs =
            [ "${root_out_dir}/common/samples/module/{{source_file_part}}" ]
      } else {
        outputs = [ "${root_out_dir}/common/samples/module/${module.prefix}/{{source_file_part}}" ]
      }
    }
  }

  # All dynamic libraries to be copied to the path "/previewer/common/bin/",
  # which are related to the previewer, can be added to this script.
  ohos_copy("copy_preview_shared_library") {
    deps = []
    foreach(module, napi_modules) {
      deps += [ ":copy_napi_${module.prefix}libs" ]
    }

    sources = [
      "//base/global/system_resources/fonts",
      "//foundation/arkui/ace_engine/adapter/preview/sdk/fontconfig.json",
      "//third_party/icu/ohos_icu4j/data/icudt69l.dat",
    ]

    foreach(item, common_bin) {
      subsystem_name = item.subsystem_name
      part_name = item.part_name
      deps += [ item.label ]
      out_path = get_label_info(item.label, "root_out_dir")
      lib_names = []
      if (defined(item.lib_names)) {
        lib_names += item.lib_names
      } else {
        lib_names +=
            [ string_replace(get_label_info(item.label, "name"), "lib", "", 1) ]
      }
      foreach(lib_name, lib_names) {
        sources += [ "${out_path}/${subsystem_name}/${part_name}/lib${lib_name}${dylib_suffix}" ]
      }
    }

    outputs = [ "${root_out_dir}/common/samples/{{source_file_part}}" ]
  }
} else {
  ohos_copy("copy_resource_dynamic_library") {
    if (use_mac) {
      sources = [
        "//prebuilts/ace-toolkit/preview/rich/lib/mac/tv/libhmicuuc${dylib_suffix}",
        "//prebuilts/ace-toolkit/preview/rich/lib/mac/tv/libresourcemanager_mac${dylib_suffix}",
      ]
    } else {
      sources = [
        "//prebuilts/ace-toolkit/preview/rich/lib/windows/tv/libhmicuuc${dylib_suffix}",
        "//prebuilts/ace-toolkit/preview/rich/lib/windows/tv/libresourcemanager_win${dylib_suffix}",
      ]
    }
    outputs = [ "${root_out_dir}/common/samples/{{source_file_part}}" ]
  }
}

# Install packages
group("previewer_demo") {
  if (is_wearable_product) {
    deps = [ ":ace_wearable_test" ]
  } else {
    deps = [
      ":ace_car_test",
      ":ace_card_test",
      ":ace_phone_test",
      ":ace_tablet_test",
      ":ace_tv_test",
    ]
  }
}
