# Copyright (c) 2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//ace_engine/ft_build/ace_config.gni")
import("//ace_engine/ft_build/build/ace_lib.gni")

# generate libace_engine and libace_debug targets
foreach(item, ace_platforms) {
  print("[GN DEBUG] ace_platforms: " + item.name)
  platform = item.name
  engine_config = {}
  engine_config = item.config
  support_engines = []
  support_engines = engine_config.js_engines

  # generate libace_static lib
  libace_static("libace_static_" + item.name) {
    platform = item.name
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }
  }
}

# foreach(item, ace_platforms) {
#   platform = item.name
#   if (platform == "ohos") {
#     # libace target
#     ohos_shared_library("libace") {
#       deps = [ "$ace_root/ft_build/build:libace_static_ohos" ]
#       part_name = ace_engine_part
#       subsystem_name = ace_engine_subsystem
#     }

#     ohos_source_set("ace_ohos_unittest_base") {
#       subsystem_name = ace_engine_subsystem
#       part_name = ace_engine_part
#       testonly = true
#       sources = [
#         "$ace_root/frameworks/base/test/mock/mock_ace_container.cpp",
#         "$ace_root/frameworks/base/test/mock/mock_download_manager.cpp",
#         "$ace_root/frameworks/base/test/mock/mock_drag_window_old.cpp",
#         "$ace_root/frameworks/core/common/test/mock/mock_ace_application_info.cpp",
#         "$ace_root/frameworks/core/components/test/mock/mock_resource_adapter.cpp",
#         "$ace_root/frameworks/core/components/test/unittest/mock/subwindow_mock.cpp",
#       ]

#       if (is_standard_system) {
#         sources -= [
#           "$ace_root/frameworks/base/test/mock/mock_download_manager.cpp",
#           "$ace_root/frameworks/core/components/test/mock/mock_resource_adapter.cpp",
#         ]
#       }

#       configs = [ "$ace_root:ace_test_config" ]

#       deps = [
#         "$ace_root/adapter/ohos/osal:ace_osal_ohos",
#         "$ace_root/frameworks/base:ace_base_ohos",
#         "$ace_root/frameworks/base/resource:ace_resource",
#         "$ace_root/frameworks/bridge:framework_bridge_ohos",
#         "$ace_root/frameworks/core:ace_core_ohos",
#         "$ace_root/frameworks/core/components/theme:build_theme_code",
#         "//third_party/googletest:gtest_main",
#       ]

#       external_deps = [ "c_utils:utils" ]
#     }
#   }
# }

# Config for reduceing eh_frame section on aosp platform to save rom size.
config("reduce_eh_frame_config") {
  if (!use_linux) {
    cflags = [
      "-fno-unwind-tables",
      "-fomit-frame-pointer",
    ]
    cflags_cc = cflags
  }
}
